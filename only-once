#!/bin/bash

set -euo pipefail
. /.functions

[ -v WRAPPED_STATE ] || fail "Must set the WRAPPED_STATE environment variable to point to the location where to track if the initializer script has already been run"

require_dir_readwrite "${WRAPPED_STATE}"

[ -v WRAPPED_SCRIPT ] || fail "Must set the WRAPPED_SCRIPT environment variable to point to the script to be wrapped"
require_file_executable "${WRAPPED_SCRIPT}"

# In case the arguments haven't been defined
[ -v WRAPPED_SCRIPT_ARGS ] || WRAPPED_SCRIPT_ARGS=""

# If we're not given an explicit name to track state with, we deduce it from the script's
# filename and add a dot in front to hide the file
set_or_default WRAPPED_STATE_NAME ".${WRAPPED_SCRIPT##*/}"

set_or_default MARKER_VALUE

# Remove leading and trailing spaces from the marker value
MARKER_VALUE="$(echo -n "${MARKER_VALUE}" | sed -e 's;^\s*;;g' -e 's;\s*$;;g')"

MARKER_FILE="${WRAPPED_STATE}/${WRAPPED_STATE_NAME}"
if [ -e "${MARKER_FILE}" ] ; then
	QUIT="true"
	if [ -n "${MARKER_VALUE}" ] ; then

		# Is the MARKER_VALUE in the state file?
		grep -Eqi "\t${MARKER_VALUE}$" "${MARKER_FILE}" || QUIT="false"

		# The marker isn't there... we must run the initialization
		err "The run marker value [${MARKER_VALUE}] is not present in the state tracker file at [${MARKER_FILE}]"
	fi

	as_boolean "${QUIT}" && quit "The state has already been initialized"
fi

init_ssl

running "Calling the wrapped script"
(
	# This should help mitigate exploitation
	eval CMD=( "${WRAPPED_SCRIPT@Q}" ${WRAPPED_SCRIPT_ARGS} ) || fail "Failed to define the wrapped command using script [${WRAPPED_SCRIPT}] and args [${WRAPPED_SCRIPT_ARGS}]"
	execute "${CMD[@]}"
) || fail "Failed to execute the wrapped script (rc=${?})"

TS="$(timestamp)"
MARKER_VALUE_MSG=""
if [ -n "${MARKER_VALUE}" ] ; then
	MARKER_VALUE_MSG=", with the marker value [${MARKER_VALUE}]"

	# For when it's written out
	MARKER_VALUE="\t${MARKER_VALUE}"
fi
ok "Wrapped script succeeded, marking the state to [${MARKER_FILE}] (timestamp = ${TS}${MARKER_VALUE_MSG})"
echo -e "${TS}${MARKER_VALUE}" >> "${MARKER_FILE}" || fail "Failed to create the state tracking marker"
exit 0
